%!PS-Adobe-2.0 EPSF-1.2
%%BoundingBox: 0 0 2168 872
%%Creator: Cadence Design Systems
%%EndComments
%%BeginProlog
%%DocumentFonts:Courier
%******************************************************************************
%
% The preview image should preceed this file if a preview is being generated.
%
% This should be the first line: %!PS-Adobe-2.0 EPSF-1.2
% There should also be a BBox:   %%BoundingBox:0 0 300 300
%
% Cadence Design Systems -- Supports Both Level 1 and Level 2 Printers
%
% EPS Prologue -- Version 97B (aka 9702)
%
/setpacking where
{
	/currpack currentpacking def
	pop true setpacking
} if
%******************************************************************************
/gis  {
  0 setgray
  mark
  save
  newpath

  72 resolution div
  dup
  scale

  /stippleArray 10 array def
    stippleArray
     dup    0  <00000000000000000000000000000000
                00000000000000000000000000000000> put
     dup    1  <00000000000000000000000000000000
                00000000000000000000000000000000> put
     dup    2  <00000000000000000000000000000000
                00000000000000000000000000000000> put
     dup    3  <00000000000000000000000000000000
                00000000000000000000000000000000> put
     dup    4  <00000000000000000000000000000000
                00000000000000000000000000000000> put
     dup    5  <00000000000000000000000000000000
                00000000000000000000000000000000> put
     dup    6  <00000000000000000000000000000000
                00000000000000000000000000000000> put
     dup    7  <00000000000000000000000000000000
                00000000000000000000000000000000> put
     dup    8  <08080404020201018080404020201010
	        08080404020201018080404020201010> put
	    9  <08081414222241418080414122221414
		08081414222241418080414122221414> put



  /newFont 10 dict def
  newFont begin

    /FontType 3 def
    /FontMatrix [1 0 0 1 0 0] def
     /FontBBox [0 0 1 1] def

    /Encoding 256 array def
    0 1 255 {Encoding exch /.notdef put} for
    Encoding
      dup 48 /0  put
      dup 49 /1  put
      dup 50 /2  put
      dup 51 /3  put
      dup 52 /4  put
      dup 53 /5  put
      dup 54 /6  put
      dup 55 /7  put
      dup 56 /8  put
          57 /9  put

    /BuildChar {
        /char exch def
        /fontdict exch def
	/charname fontdict /Encoding get char get def

         1 0 setcharwidth

          16 16 true
          [16 0 0 -16 -.5 15.50]
           stippleArray char 48 sub 1 getinterval cvx
          imagemask
    } def

  end
  /StippleFont newFont definefont 66 scalefont setfont
  /fillChar 0 def

  /ellipsedict 8 dict def
  ellipsedict /mtrx matrix put

  /xformdict 6 dict def
  xformdict /xformmtrx matrix put

  /rt 0 def
  /color     0 def

  /lineRed   0 def
  /lineGreen 0 def
  /lineBlue  0 def

  /fillRed   0 def
  /fillGreen 0 def
  /fillBlue  0 def

  /hatchSet 0 def

  /rht 0 def
  /rw 0 def
  /ils 1.0 def
  /textalign 1 def

  gsave

  } def

/cdsLevel2 /languagelevel where {pop languagelevel} {1} ifelse 2 ge def

/cdsColor cdsLevel2 not {
                          false
                          /colorimage where {pop pop true} if
                        } {
	                  true
                        } ifelse
def

/gfs  {
    grestore
    showpage
    restore
    cleartomark
  } def
/pap {
    /resolution exch def
    /pageHeight exch def
    /pageWidth exch def

  } bind def
/rotp  {
  /rt 90 def
  grestore
} def
/clwin  {
    /y2 exch def
    /x2 exch def
    /y1 exch def
    /x1 exch def
    rt 90 eq
      {
        pageWidth 0 translate
        rt rotate
	/rt 0 def
	gsave
      } if

    grestore
    gsave
    newpath
    x1 y1 moveto
    x2 y1 lineto
    x2 y2 lineto
    x1 y2 lineto
    closepath
    clip
    newpath
} def
/bblineto {
  dup dup   /cury exch def
  miny lt {/miny exch def}
    {dup maxy gt { /maxy exch def }
           {pop } ifelse } ifelse
  dup dup
  minx lt {/minx exch def}
    {dup maxx gt { /maxx exch def }
           { pop } ifelse } ifelse
  cury lineto
} def
/bbmoveto {
  dup dup
  /miny exch def /maxy exch def /cury exch def
  dup dup
  /minx exch def /maxx exch def
  cury moveto
} def
/ellipse
  { ellipsedict begin
    /endangle exch def
    /startangle exch def
    /yrad exch def
    /xrad exch def
    /y exch def
    /x exch def

    /savematrix mtrx currentmatrix def
    x y translate
    xrad yrad scale
    0 0 1 startangle endangle arc
    savematrix setmatrix
    end
  } def
/dls  {
  gsave
  newpath
  moveto
  rlineto
  setLineColor
  stroke
  grestore
} def
/dlt  {
  newpath
  gsave
  setLineColor
  moveto
} def
/dslt  {
  newpath
  gsave
  setLineColor
  moveto
} def
/dlv  {
  rlineto
} def
/dle  {
  stroke
  grestore
} def
/mps {
  newpath
  moveto
} def
/dbu  {
    setLineColor
    newpath
    moveto
    dup 0 rlineto
    0 3 -1 roll
    rlineto
    neg 0 rlineto
    closepath
    stroke
  } def
/dbf  {
    /y2 exch def
    /x2 exch def
    /y1 exch def
    /x1 exch def
    gsave
      newpath
      x1 y1 bbmoveto
      x2 y1 bblineto
      x2 y2 bblineto
      x1 y2 bblineto
      closepath
      clip fillpath
    grestore
  } def

/dbs  {
    /y2 exch def
    /x2 exch def
    /y1 exch def
    /x1 exch def
      newpath
      x1 y1 moveto
      x2 y1 lineto
      x2 y2 lineto
      x1 y2 lineto
      closepath
      gsave
      setFillColor
      fill grestore
      setLineColor stroke

} def
/dpb { gsave
      newpath bbmoveto
} def
/dpu  {
        closepath
        setLineColor
        stroke
      grestore
} def
/dpf  {
       closepath
       clip fillpath
     grestore
} def
/dps  {
       closepath
       setFillColor
       fill grestore
       setLineColor stroke
} def
/dpv  {
    bblineto
} def
/dcu  {
    /radius exch def
    /y exch def
    /x exch def

    gsave
      newpath
      x y radius radius 0 360 ellipse
      setLineColor
      stroke
    grestore
} def
/dcf  {
    /radius exch def
    /y exch def
    /x exch def
    /minx x radius sub def
    /miny y radius sub def
    /maxx x radius add def
    /maxy y radius add def
    gsave
      newpath
      x y radius radius 0 360 ellipse
      clip fillpath
    grestore
  } def
/dcs  {
    /radius exch def
    /y exch def
    /x exch def

    gsave
      newpath
      x y radius radius 0 360 ellipse
      setFillColor
      fill
    grestore
    setLineColor stroke
  } def
/delu  {
    /yradius exch def
    /xradius exch def
    /y exch def
    /x exch def

    newpath
      x y xradius yradius 0 360 ellipse
      gsave
      setFillColor
      stroke
    grestore
  } def
/delf  {
    /yradius exch def
    /xradius exch def
    /y exch def
    /x exch def
    /minx x xradius sub def
    /miny y yradius sub def
    /maxx x xradius add def
    /maxy y yradius add def

    gsave
      newpath
      x y xradius yradius 0 360 ellipse
      clip fillpath
    grestore
  } def
/dels  {
    /yradius exch def
    /xradius exch def
    /y exch def
    /x exch def

    gsave
      newpath
      x y xradius yradius 0 360 ellipse
      setFillColor fill
    grestore
    setLineColor stroke
} def
/dau  { gsave
          newpath ellipse
          setLineColor
          stroke
        grestore
} def
/setlinedash {
    1 index length 11 gt
    {exch dup length 11 sub 11 getinterval exch } if
    setdash
} def

/lpb    {
    pop
    [
    /offset 0 def
    /offcount 0 def
    /oncount 0 def
} def

/lpon  {
    /oncount exch def
    pop
    oncount
} def

/lpoff  {
    /offcount exch def
    pop
    oncount 0 eq
    {/offset offcount def }
    { offcount } ifelse
} def

/lpe  {
    /linewidth exch def
    pop
    offset 0 ne
    { offset } if ] 0 setlinedash
    linewidth setlinewidth
} def

/sls    { pop } def

/ssls  { [] 0 setdash
          1 setlinewidth
} def
/fillpath  {
    setFillColor
    /str 1 string def
    /minx minx 66 div
    truncate 66 mul def
    /miny miny 66 div
    truncate 66 mul def

          /fillLine maxx minx sub cvi 66 idiv 1 add string def

          0 1 fillLine length 1 sub {
            fillLine exch fillChar str cvs cvi 48 add put
          } for

          minx
          miny 66 maxy
            { exch dup 3 -1 roll moveto fillLine show
          } for pop
    hatchSet 1 eq {setLineColor stroke} if
} def

/fds  { pop /currchar 30 def} def
/fdf   {
    exch
    /char exch def
    /stipple stippleArray char get def
    stipple exch currchar
    exch putinterval
    stippleArray char stipple put
    /currchar currchar 2 sub def
  } def
/fde  {
    pop
  } def
/sfp  {
    /fillChar exch def
    /hatchSet 0 def
    fillChar 8 ge {/hatchSet 1 def} if
    /StippleFont findfont 66 scalefont setfont
  } def

  /setLineColor {
    cdsLevel2 cdsColor or {
      lineRed    1000 div
      lineGreen  1000 div
      lineBlue   1000 div
      setrgbcolor } if
  } def

  /setFillColor {
    cdsLevel2 cdsColor or {
      fillRed    1000 div
      fillGreen  1000 div
      fillBlue   1000 div
      setrgbcolor }
      { 0 setgray } ifelse
  } def

  /slc {
    /lineBlue  exch def
    /lineGreen exch def
    /lineRed   exch def
    /color 1 def
    lineBlue 1000 eq {lineGreen 1000 eq {lineRed 1000 eq {
      /lineBlue  0 def
      /lineGreen 0 def
      /lineRed   0 def
    } if} if} if
  } def

  /sfc {
    /fillBlue  exch def
    /fillGreen exch def
    /fillRed   exch def
    /color 1 def
    fillBlue 1000 eq {fillGreen 1000 eq {fillRed 1000 eq {
      /fillBlue  0 def
      /fillGreen 0 def
      /fillRed   0 def
    } if} if} if
  } def

%******************************************************************************
% Resident Font Scale Sequence
%    x y rfss
%
/rfss  {
    4 2 roll
    dup
    3 div
    add
    scalefont
    setfont
    0 color ne {setLineColor}
               { 0 setgray } ifelse
  } bind def
%******************************************************************************
% Resident Font End
%
%
/rfe
{
/width exch def
5 1 roll
moveto

xformdict begin
/savematrix xformmtrx currentmatrix def

exch 				% rotate mirror to mirror rotate
matrix rotate concat		% add rotation to current transform matrix
dup 1 eq
	{pop 1 -1}		% X mirror

	{2 eq
		{-1 1}		% Y mirror
		{1 1}		% No mirror
	ifelse}
ifelse matrix scale concat	% add mirror to current transform matrix


dup				% duplicate (string)
length				% replace one of the strings with its length
dup 0 ne
{
	3 -1 roll		% move fixed width flag to top of stack
	0 eq
	{			% if flag is false (0) do old string handling
		/numChr exch def
		dup stringwidth	%stack  wy,wx,(string)
		pop
		width
		exch sub	%stack  xdiff,ydiff,(string)

		cvi
		numChr idiv	%stack  xspace,ydiff,(string)

		/xoff exch def

		{		% this is the positioning  function for kshow
			pop pop
			xoff
			0
			rmoveto
		}

		exch
		kshow
	}

	{			% if flag is true (not 0) just show string
		pop show
	}
	ifelse
}

{
	pop pop pop
}
ifelse
      savematrix setmatrix
    end
  } bind def
%******************************************************************************
% Resident Font Text Alignment
%
/rfta {						% <align> rfta
	/textalign exch def
} bind def
%******************************************************************************
% Resident Font Interline Space
%
/rfis {						% <space> rfis
	/ils exch def
} bind def
%******************************************************************************
% Resident Font Scale
%
/rfsc {						% <ht> <rotate> <mirror> rfs
% What I need to do here is to validate <ht>.  <ht> can not be 0.  If it is 0
% then make it 1.  To do this I will need to use the roll operation and exch
% and maybe dup.  The algorithm looks like this:
% Roll stack to make it look like : <rotate> <mirror> <ht>
% duplicate <ht> so I can test it.
% If <ht> is equal to 0 then
% exchange 1 for <ht>
% In any case roll stack to make it look like: <ht> <rotate> <mirror>
% qed.
%
	3 -1 roll		% <rotate> <mirror> <ht>
	dup 0 eq
	{
		1 exch pop	% <rotate> <mirror> <ht=1>
	}
	if
	3 1 roll		% <ht> <rotate> <mirror>

	0 color ne
	{
		setLineColor
	}
	{
		0 setgray
	}
	ifelse

	/tasz 60 def
	/taln 59 def

	/ta tasz array def
	/cta ta def
	/tc 0 def
	/sa tasz array def
	/sc 0 def
} bind def
%******************************************************************************
% Resident Font Restricted Text
%
/rfrt {						% <height> <width> rfrt
	/rht exch def
	/rw exch def
	% Since restricting one dimension and not the other is not supported
	% if one dimension is turned off then ensure that both dimensions
	% are turned off (a value of 0 means no restriction)
	rht 0 eq rw 0 eq or
	{
		/rht 0 def
		/rw 0 def
	}
	if
} bind def
%******************************************************************************
% Resident Font Text Score
%
/rfts {						% <score> <start> <end> rfts
	sc tasz lt
	{
		3 -1 roll 3 array astore
		sa sc 3 -1 roll put
		/sc sc 1 add def
	}
	{
		pop pop pop
	} ifelse
} bind def
%******************************************************************************
% Resident Font Text
%
/rft {						% (text) rft
	tc taln gt tc tasz mod 0 eq and
	{
		cta /cta tasz array dup def put
	} if

	tc tasz mod exch cta 3 1 roll sc
	sa dup length array copy
	3 array astore put

	/sc 0 def
	/tc tc 1 add def
} bind def
%******************************************************************************
% Resident Font Complete
%
/rfc {						% <x> <y> rfc
	/cta ta def

	%
	% If text is restricted or if text alignment is not left, find the
	% longest text string
	%
	/mw 0 def
	rw 0 ne textalign 3 gt or
	{
		%
		% Find the widest text string
		%
		5 index		% <fn> <ht> <rot> <mir> <x> <y> <fn>
		setfont
		0 1 tc 1 sub
		{
			dup taln gt 1 index tasz mod 0 eq and
			{
				/cta cta tasz get def
			}
			if

			tasz mod cta exch get 0 get
			stringwidth pop dup mw gt
			{
				/mw exch def null
			}
			if

			pop
		}
		for

		/cta ta def
	}
	if

	%
	% Operand stack:		<fn> <ht> <rot> <mir> <x> <y>
	% Check for restricted text
	%
	rw 0 ne
	{

		%
		% Compute font scale factors
		%
		6 -2 roll pop		% <rot> <mir> <x> <y> <fn>
		rw mw div
		rht tc div dup ils mul 0.5 add cvi /tht exch def
		matrix scale makefont	% <rot> <mir> <x> <y> <fn>
		/mw rw def
	}
	{
		6 -2 roll		% <rot> <mir> <x> <y> <fn> <ht>
		dup 0 eq		% Test if height is 0
		{			% change to 1 if it is
                	1 exch pop	% <rot> <mir> <x> <y> <fn> <1>
		}
		if
		dup ils mul 0.5 add cvi /tht exch def
		dup mw mul /mw exch def scalefont
	}
	ifelse

	setfont				% <rot> <mir> <x> <y>

	moveto			% <rot> <mir>

	xformdict begin
		/savematrix xformmtrx currentmatrix def

		exch matrix rotate concat
		dup 1 eq
		{
			pop 1.0 -1.0		% x mirror
		}
		{
			2 eq
			{
				-1.0 1.0	% y mirror
			}
			{
				1.0 1.0		% no mirror
			}
			ifelse
		}
		ifelse
		matrix scale concat

		currentpoint

		%
		% Adjust origin for text alignment. For lc (4), cc (5), and uc
		% (6) move left by width / 2. For lr (7), cr (8), and ur (9)
		% move left by width. For cl (2), cc (5), and cr (8) move down
		% by height / 2. For ul (3), uc (6), and ur (9) move down by
		% height.
		%
		textalign 2 eq textalign 5 eq or textalign 8 eq or
		{
			tht tc mul 2 div sub
		} if
		textalign 3 eq textalign 6 eq or textalign 9 eq or
		{
			tht tc mul sub
		} if
		/oy exch def

		textalign 3 gt textalign 7 lt and
		{
			mw 2 div sub
		} if
		textalign 6 gt textalign 10 lt and
		{
			mw sub
		} if
		/ox exch def

		0 1 tc 1 sub
		{
			dup taln gt 1 index tasz mod 0 eq and
			{
				/cta cta tasz get def
			}
			if

			cta exch tasz mod get aload pop
			dup 3 -1 roll	% (str) [score] [score] <cnt>
			0 1 3 -1 roll 1 sub	% (str) [score] [score] 0 1 <cnt>
			{
				newpath ox oy moveto
				get aload pop pop exch	% ... <len> <start>
				dup 0 exch		% ... <len> <start> 0 <s
				5 index 3 1 roll	% ... (str) 0 <start>
				getinterval		% ... <len> <start> (.)
				stringwidth pop tht rmoveto
				3 index			% ... <len> <start> (str)
				3 1 roll exch		% ... (str) <start> <len>
%				dup 3 1 roll
%				sub
				getinterval stringwidth pop
				0 rlineto stroke
				dup
			}
			for
			pop pop
			ox oy moveto
			show

			%
			% Move origin for next line
			%
			/oy oy tht sub def
		}
		for

		savematrix setmatrix
	end
	pop					% throw away the "0"
} bind def
%*****************************
%
% End of Cadence eps.prologue
%
%*****************************
/setpacking where
{
	pop currpack setpacking
} if
%%EndProlog
/#copies 1 def
 72000 72000 2400 pap
%%Page: cds 1
gis
9198 0 62801 29022 clwin
136 0 71862 29019 clwin
76 0 71849 29044 clwin
0 0 71925 29044 clwin
ssls
4409 1292 dpb
4409 2661 dpv
5246 2661 dpv
5930 1976 dpv
5246 1292 dpv
dpu
2889 13457 dpb
2889 14826 dpv
3725 14826 dpv
4409 14141 dpv
3725 13457 dpv
dpu
67515 17259 dpb
67515 18627 dpv
68352 18627 dpv
69036 17943 dpv
68352 17259 dpv
dpu
2889 24862 dpb
2889 26230 dpv
3725 26230 dpv
4409 25546 dpv
3725 24862 dpv
dpu
145 0 10564 22125 dls
0 -761 10637 22125 dls
145 0 10564 21364 dls
11361 22016 dlt
-36 72 dlv
-109 37 dlv
-72 0 dlv
-109 -37 dlv
-73 -108 dlv
-36 -181 dlv
0 -181 dlv
36 -145 dlv
73 -72 dlv
109 -37 dlv
36 0 dlv
108 37 dlv
73 72 dlv
36 109 dlv
0 36 dlv
-36 108 dlv
-73 73 dlv
-108 36 dlv
-36 0 dlv
-109 -36 dlv
-73 -73 dlv
-36 -108 dlv
dle
145 0 46299 16042 dls
0 -760 46371 16042 dls
145 0 46299 15282 dls
46733 15897 dlt
73 37 dlv
108 108 dlv
0 -760 dlv
dle
144 0 45539 28967 dls
0 -760 45611 28967 dls
144 0 45539 28207 dls
46299 28967 dlt
-362 0 dlv
-36 -325 dlv
36 36 dlv
109 36 dlv
108 0 dlv
109 -36 dlv
72 -73 dlv
36 -108 dlv
0 -73 dlv
-36 -108 dlv
-72 -73 dlv
-109 -36 dlv
-108 0 dlv
-109 36 dlv
-36 37 dlv
-36 72 dlv
dle
3041 0 7451 21744 dls
10492 24786 dlt
0 -6083 dlv
6082 3041 dlv
-6082 3042 dlv
dle
18095 21744 dpb
18095 21897 dpv
18019 22125 dpv
17867 22277 dpv
17715 22353 dpv
17563 22505 dpv
17411 22505 dpv
17183 22505 dpv
17031 22429 dpv
16878 22353 dpv
16726 22201 dpv
16650 22049 dpv
16574 21821 dpv
16574 21668 dpv
16650 21440 dpv
16726 21288 dpv
16878 21136 dpv
17031 21060 dpv
17183 20984 dpv
17411 20984 dpv
17563 20984 dpv
17715 21136 dpv
17867 21212 dpv
18019 21364 dpv
18095 21592 dpv
dpu
-3041 0 21136 21744 dls
3041 0 27979 10340 dls
-3042 0 43946 11100 dls
3041 0 27979 12621 dls
31020 14141 dlt
0 -6082 dlv
8364 0 dlv
dle
39384 8059 dlt
304 304 dlv
304 228 dlv
228 380 dlv
228 304 dlv
152 380 dlv
152 457 dlv
76 380 dlv
76 380 dlv
0 456 dlv
-76 380 dlv
-76 380 dlv
-152 457 dlv
-152 380 dlv
-228 304 dlv
-228 380 dlv
-304 228 dlv
-304 304 dlv
dle
8364 0 31020 14141 dls
3802 0 52309 16422 dls
55350 14902 dlt
457 -76 dlv
456 -76 dlv
456 0 dlv
456 76 dlv
456 76 dlv
380 152 dlv
457 152 dlv
380 228 dlv
380 304 dlv
304 304 dlv
304 304 dlv
304 380 dlv
228 381 dlv
152 380 dlv
153 456 dlv
dle
-3041 0 63714 17943 dls
3802 0 52309 18703 dls
55350 14902 dlt
228 456 dlv
229 456 dlv
152 456 dlv
76 532 dlv
76 533 dlv
0 456 dlv
-76 532 dlv
-76 532 dlv
-152 456 dlv
-229 457 dlv
-228 456 dlv
dle
60673 17943 dlt
-153 380 dlv
-228 380 dlv
-304 380 dlv
-228 305 dlv
-380 228 dlv
-304 304 dlv
-380 152 dlv
-380 228 dlv
-457 76 dlv
-380 76 dlv
-456 76 dlv
-456 0 dlv
-380 -76 dlv
-457 -76 dlv
-380 -152 dlv
dle
3041 0 27219 23265 dls
-3041 0 43185 24025 dls
3041 0 27219 25546 dls
30260 27067 dlt
0 -6083 dlv
8363 0 dlv
dle
38623 20984 dlt
305 304 dlv
304 228 dlv
228 381 dlv
228 304 dlv
152 380 dlv
152 456 dlv
76 380 dlv
76 380 dlv
0 457 dlv
-76 380 dlv
-76 380 dlv
-152 456 dlv
-152 380 dlv
-228 304 dlv
-228 380 dlv
-304 229 dlv
-305 304 dlv
dle
8363 0 30260 27067 dls
12235 22867 dlt
36 -36 dlv
37 36 dlv
-37 36 dlv
-36 -36 dlv
dle
0 -506 12271 22613 dls
0 -506 12561 22613 dls
12561 22469 dlt
109 108 dlv
72 36 dlv
109 0 dlv
72 -36 dlv
36 -108 dlv
0 -362 dlv
dle
13176 22613 dlt
218 -506 dlv
217 506 dlv
dle
13792 22396 dlt
434 0 dlv
0 73 dlv
-36 72 dlv
-36 36 dlv
-72 36 dlv
-109 0 dlv
-72 -36 dlv
-73 -72 dlv
-36 -109 dlv
0 -72 dlv
36 -109 dlv
73 -72 dlv
72 -36 dlv
109 0 dlv
72 36 dlv
72 72 dlv
dle
0 -506 14480 22613 dls
14480 22396 dlt
36 109 dlv
72 72 dlv
73 36 dlv
108 0 dlv
dle
14987 22867 dlt
0 -616 dlv
36 -108 dlv
72 -36 dlv
73 0 dlv
dle
254 0 14878 22613 dls
15349 22396 dlt
434 0 dlv
0 73 dlv
-36 72 dlv
-36 36 dlv
-73 36 dlv
-108 0 dlv
-73 -36 dlv
-72 -72 dlv
-36 -109 dlv
0 -72 dlv
36 -109 dlv
72 -72 dlv
73 -36 dlv
108 0 dlv
73 36 dlv
72 72 dlv
dle
0 -506 16037 22613 dls
16037 22396 dlt
36 109 dlv
72 72 dlv
73 36 dlv
108 0 dlv
dle
34478 11480 dlt
290 761 dlv
289 -761 dlv
dle
362 0 34587 11734 dls
35274 11480 dlt
0 761 dlv
507 -761 dlv
0 761 dlv
dle
36071 11480 dlt
0 761 dlv
253 0 dlv
109 -37 dlv
72 -72 dlv
37 -72 dlv
36 -109 dlv
0 -181 dlv
-36 -109 dlv
-37 -72 dlv
-72 -73 dlv
-109 -36 dlv
-253 0 dlv
dle
36831 12060 dlt
0 36 dlv
36 72 dlv
37 36 dlv
72 37 dlv
145 0 dlv
72 -37 dlv
37 -36 dlv
36 -72 dlv
0 -73 dlv
-36 -72 dlv
-73 -109 dlv
-362 -362 dlv
507 0 dlv
dle
57159 18323 dlt
-73 -36 dlv
-72 -73 dlv
-36 -72 dlv
-36 -109 dlv
0 -181 dlv
36 -108 dlv
36 -73 dlv
72 -72 dlv
73 -36 dlv
145 0 dlv
72 36 dlv
72 72 dlv
37 73 dlv
36 108 dlv
0 181 dlv
-36 109 dlv
-37 72 dlv
-72 73 dlv
-72 36 dlv
-145 0 dlv
dle
57774 17563 dlt
0 760 dlv
326 0 dlv
109 -36 dlv
36 -36 dlv
36 -73 dlv
0 -72 dlv
-36 -73 dlv
-36 -36 dlv
-109 -36 dlv
-326 0 dlv
dle
253 -398 58028 17961 dls
58535 18142 dlt
0 36 dlv
36 73 dlv
36 36 dlv
72 36 dlv
145 0 dlv
73 -36 dlv
36 -36 dlv
36 -73 dlv
0 -72 dlv
-36 -73 dlv
-73 -108 dlv
-362 -362 dlv
507 0 dlv
dle
33718 24406 dlt
289 760 dlv
290 -760 dlv
dle
362 0 33826 24659 dls
34514 24406 dlt
0 760 dlv
507 -760 dlv
0 760 dlv
dle
35311 24406 dlt
0 760 dlv
253 0 dlv
109 -36 dlv
72 -73 dlv
36 -72 dlv
37 -109 dlv
0 -181 dlv
-37 -108 dlv
-36 -73 dlv
-72 -72 dlv
-109 -36 dlv
-253 0 dlv
dle
36071 24985 dlt
0 36 dlv
36 72 dlv
36 37 dlv
73 36 dlv
145 0 dlv
72 -36 dlv
36 -37 dlv
36 -72 dlv
0 -72 dlv
-36 -73 dlv
-72 -108 dlv
-362 -362 dlv
507 0 dlv
dle
0 11404 5930 10340 dls
22049 0 5930 10340 dls
3802 0 21136 21744 dls
0 1521 24938 21744 dls
2281 0 24938 23265 dls
1521 0 5930 21744 dls
6310 10340 dpb
6310 10492 dpv
6234 10568 dpv
6158 10644 dpv
6006 10720 dpv
5854 10720 dpv
5778 10644 dpv
5626 10568 dpv
5550 10492 dpv
5550 10340 dpv
5550 10188 dpv
5626 10112 dpv
5702 10036 dpv
5854 9960 dpv
6006 9960 dpv
6082 10036 dpv
6234 10112 dpv
6310 10188 dpv
dps
0 8364 5930 1976 dls
21289 0 4409 14141 dls
0 1520 25698 12621 dls
22810 0 4409 25546 dls
2281 0 25698 12621 dls
6083 0 43185 24025 dls
5322 0 43946 11100 dls
0 5322 49268 18703 dls
0 5322 49268 11100 dls
3041 0 49268 18703 dls
3041 0 49268 16422 dls
3801 0 63714 17943 dls
2136 2248 dlt
-73 72 dlv
-108 36 dlv
-145 0 dlv
-109 -36 dlv
-72 -72 dlv
0 -73 dlv
36 -72 dlv
36 -36 dlv
73 -36 dlv
217 -73 dlv
72 -36 dlv
36 -36 dlv
37 -73 dlv
0 -108 dlv
-73 -73 dlv
-108 -36 dlv
-145 0 dlv
-109 36 dlv
-72 73 dlv
dle
2860 2356 dlt
-471 0 dlv
0 -760 dlv
471 0 dlv
dle
290 0 2389 1994 dls
3077 2356 dlt
0 -760 dlv
434 0 dlv
dle
1437 14159 dlt
326 0 dlv
108 -36 dlv
36 -36 dlv
37 -72 dlv
0 -109 dlv
-37 -72 dlv
-36 -37 dlv
-108 -36 dlv
-326 0 dlv
0 761 dlv
326 0 dlv
108 -37 dlv
36 -36 dlv
37 -72 dlv
0 -73 dlv
-37 -72 dlv
-36 -36 dlv
-108 -37 dlv
dle
69742 18323 dlt
-72 -36 dlv
-73 -73 dlv
-36 -72 dlv
-36 -109 dlv
0 -181 dlv
36 -108 dlv
36 -73 dlv
73 -72 dlv
72 -36 dlv
145 0 dlv
72 36 dlv
73 72 dlv
36 73 dlv
36 108 dlv
0 181 dlv
-36 109 dlv
-36 72 dlv
-73 73 dlv
-72 36 dlv
-145 0 dlv
dle
70357 18323 dlt
0 -543 dlv
37 -109 dlv
72 -72 dlv
109 -36 dlv
72 0 dlv
109 36 dlv
72 72 dlv
36 109 dlv
0 543 dlv
dle
0 -760 71299 18323 dls
507 0 71045 18323 dls
1404 25166 dlt
290 760 dlv
290 -760 dlv
dle
362 0 1513 25419 dls
18725 22885 dlt
-72 -36 dlv
-73 -73 dlv
-36 -72 dlv
-36 -109 dlv
0 -181 dlv
36 -108 dlv
36 -73 dlv
73 -72 dlv
72 -36 dlv
145 0 dlv
72 36 dlv
73 72 dlv
36 73 dlv
36 108 dlv
0 181 dlv
-36 109 dlv
-36 72 dlv
-73 73 dlv
-72 36 dlv
-145 0 dlv
dle
19340 22885 dlt
0 -543 dlv
37 -109 dlv
72 -72 dlv
109 -36 dlv
72 0 dlv
109 36 dlv
72 72 dlv
36 109 dlv
0 543 dlv
dle
0 -760 20282 22885 dls
507 0 20028 22885 dls
145 0 8739 22885 dls
0 -760 8812 22885 dls
145 0 8739 22125 dls
9102 22125 dlt
0 760 dlv
506 -760 dlv
0 760 dlv
dle
28471 13001 dlt
290 760 dlv
290 -760 dlv
dle
362 0 28580 13254 dls
28580 11118 dlt
326 0 dlv
109 -36 dlv
36 -36 dlv
36 -73 dlv
0 -108 dlv
-36 -73 dlv
-36 -36 dlv
-109 -36 dlv
-326 0 dlv
0 760 dlv
326 0 dlv
109 -36 dlv
36 -36 dlv
36 -73 dlv
0 -72 dlv
-36 -72 dlv
-36 -37 dlv
-109 -36 dlv
dle
41838 12241 dlt
-72 -37 dlv
-72 -72 dlv
-37 -72 dlv
-36 -109 dlv
0 -181 dlv
36 -109 dlv
37 -72 dlv
72 -73 dlv
72 -36 dlv
145 0 dlv
73 36 dlv
72 73 dlv
36 72 dlv
37 109 dlv
0 181 dlv
-37 109 dlv
-36 72 dlv
-72 72 dlv
-73 37 dlv
-145 0 dlv
dle
42454 11987 dlt
0 -362 dlv
36 -109 dlv
73 -36 dlv
108 0 dlv
73 36 dlv
108 109 dlv
dle
0 -507 42852 11987 dls
43178 12241 dlt
0 -616 dlv
36 -109 dlv
73 -36 dlv
72 0 dlv
dle
254 0 43069 11987 dls
52801 19083 dlt
290 761 dlv
290 -761 dlv
dle
362 0 52910 19337 dls
53670 17201 dlt
326 0 dlv
109 -37 dlv
36 -36 dlv
36 -72 dlv
0 -109 dlv
-36 -72 dlv
-36 -36 dlv
-109 -37 dlv
-326 0 dlv
0 761 dlv
326 0 dlv
109 -36 dlv
36 -37 dlv
36 -72 dlv
0 -72 dlv
-36 -73 dlv
-36 -36 dlv
-109 -36 dlv
dle
61303 19083 dlt
-73 -36 dlv
-72 -72 dlv
-37 -73 dlv
-36 -108 dlv
0 -181 dlv
36 -109 dlv
37 -72 dlv
72 -73 dlv
73 -36 dlv
144 0 dlv
73 36 dlv
72 73 dlv
36 72 dlv
37 109 dlv
0 181 dlv
-37 108 dlv
-36 73 dlv
-72 72 dlv
-73 36 dlv
-144 0 dlv
dle
61918 19083 dlt
0 -543 dlv
36 -108 dlv
73 -73 dlv
108 -36 dlv
73 0 dlv
108 36 dlv
73 73 dlv
36 108 dlv
0 543 dlv
dle
0 -760 62859 19083 dls
507 0 62606 19083 dls
27711 25926 dlt
290 761 dlv
289 -761 dlv
dle
362 0 27820 26180 dls
27820 24044 dlt
326 0 dlv
108 -37 dlv
36 -36 dlv
37 -72 dlv
0 -109 dlv
-37 -72 dlv
-36 -37 dlv
-108 -36 dlv
-326 0 dlv
0 761 dlv
326 0 dlv
108 -37 dlv
36 -36 dlv
37 -72 dlv
0 -73 dlv
-37 -72 dlv
-36 -36 dlv
-108 -36 dlv
dle
41078 25166 dlt
-72 -36 dlv
-73 -73 dlv
-36 -72 dlv
-36 -109 dlv
0 -181 dlv
36 -108 dlv
36 -73 dlv
73 -72 dlv
72 -36 dlv
145 0 dlv
72 36 dlv
73 72 dlv
36 73 dlv
36 108 dlv
0 181 dlv
-36 109 dlv
-36 72 dlv
-73 73 dlv
-72 36 dlv
-145 0 dlv
dle
41694 24912 dlt
0 -362 dlv
36 -108 dlv
72 -36 dlv
109 0 dlv
72 36 dlv
109 108 dlv
dle
0 -506 42092 24912 dls
42418 25166 dlt
0 -616 dlv
36 -108 dlv
72 -36 dlv
73 0 dlv
dle
254 0 42309 24912 dls
7146 21440 7755 22049 dbs
20832 21440 21440 22049 dbs
4409 1292 dpb
4409 2661 dpv
5246 2661 dpv
5930 1976 dpv
5246 1292 dpv
dps
2889 13457 dpb
2889 14826 dpv
3725 14826 dpv
4409 14141 dpv
3725 13457 dpv
dps
27675 12317 28283 12925 dbs
27675 10036 28283 10644 dbs
43642 10796 44250 11404 dbs
67515 17259 dpb
67515 18627 dpv
68352 18627 dpv
69036 17943 dpv
68352 17259 dpv
dps
52005 18399 52613 19007 dbs
52005 16118 52613 16726 dbs
63410 17639 64018 18247 dbs
2889 24862 dpb
2889 26230 dpv
3725 26230 dpv
4409 25546 dpv
3725 24862 dpv
dps
26915 25242 27523 25850 dbs
26915 22961 27523 23569 dbs
42881 23721 43489 24330 dbs
0 0 72000 29044 clwin
gfs
%%Trailer
%%EOF
